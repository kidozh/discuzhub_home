{"version":3,"file":"component---src-pages-test-my-bbs-js-277c04e429ecf3f757d8.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/pages/test-my-bbs.js"],"sourcesContent":["import React from \"react\"\nimport DocLayout from \"../components/doc-layout\"\nimport { Box, Grid, Link, Alert, Input, Label, Button, Spinner } from 'theme-ui'\nimport { injectIntl } from \"gatsby-plugin-intl\"\n\n\n\nclass TestPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: \"\",\n            warn: \"\",\n            apiResult: \"\",\n            apiJSON: null,\n            response: null,\n            ok: false,\n            code: 200,\n            isLoading: false\n        }\n        this.handleURLChange = this.handleURLChange.bind(this)\n        this.giveURLSuggestion = this.giveURLSuggestion.bind(this)\n        this.sendAjaxRequest = this.sendAjaxRequest.bind(this)\n        this.setCodeResult = this.setCodeResult.bind(this)\n        this.setResponseResult = this.setResponseResult.bind(this)\n\n    }\n\n\n    handleURLChange(event) {\n        this.setState({\n            url: event.target.value\n        })\n        this.giveURLSuggestion()\n    }\n\n    checkURL(URL) {\n        var str = URL;\n        //判断URL地址的正则表达式为:http(s)?://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?\n        //下面的代码中应用了转义字符\"\\\"输出一个字符\"/\"\n        var Expression = /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- .\\/?%&=]*)?/;\n        var objExp = new RegExp(Expression);\n        if (objExp.test(str) == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    getFullApiUrl(header) {\n        return header + \"/api/mobile/index.php?version=4&module=check\";\n    }\n\n    setCodeResult(response, json) {\n        this.setState({\n            \"apiResult\": response,\n            \"apiJSON\": json\n        })\n    }\n\n    clearResult(){\n        this.setState({\n            \"apiResult\":null,\n            \"apiJSON\":null\n        })\n    }\n\n    setResponseResult(ok, response) {\n        this.setState({\n            \"response\": response,\n            \"ok\": ok\n\n        })\n    }\n\n    sendAjaxRequest() {\n        const { intl } = this.props;\n        this.clearResult()\n        \n        const url = this.getFullApiUrl(this.state.url);\n        \n\n\n        var proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n        this.state.isLoading = true\n        fetch(proxyUrl + url, {\n            method: 'GET',\n            credentials: 'same-origin',\n            'X-Requested-With': 'XMLHttpRequest'\n\n        }).then(response => {\n            //setResponseResult(true,response)\n            this.setState({\n                \"ok\":response.ok,\n                \"code\":response.status,\n                \"isLoading\":false\n            })\n            console.log(response);\n            //this.setResponseResult(response.ok,response)\n            return response.text()\n\n        }).then(text => {\n            this.setCodeResult(text, null)\n            var json = JSON.parse(text)\n            console.log(text)\n            console.log(json)\n            this.setCodeResult(text, json)\n            this.setState({\n                ok: true\n            })\n        })\n            .catch(function (error) {\n                console.log(error)\n                \n            })\n    }\n\n    checkBBSResultOk(){\n        if(this.state.apiJSON!=null && this.state.apiJSON.sitename!=null){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    setURL(urlString){\n        //this.url = urlString\n        this.setState({\n            url:urlString\n        })\n    }\n\n\n    giveURLSuggestion() {\n        const { intl } = this.props;\n        const url = this.state.url;\n        if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n            // ok with protocol\n            if (this.checkURL(url)) {\n                this.setState({\n                    warn: \"\"\n                })\n            }\n            else {\n                this.setState({\n                    warn: intl.formatMessage({ id: \"test-my-bbs.warn_enter_to_check_problem\" })\n                })\n            }\n        }\n        else {\n            this.setState({\n                warn: intl.formatMessage({ id: \"test-my-bbs.warn_need_protocol\" })\n            })\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        const { intl } = this.props;\n        var url = this.state.url;\n        var state = this.state;\n        return (\n            <DocLayout subject={intl.formatMessage({ id: \"test-my-bbs.title\" })}>\n                <Grid sx={{\n                    textAlign:'center',\n                    mt: 32,\n                    mb: 32\n                }}>\n                    <h1>{intl.formatMessage({ id: \"test-my-bbs.redirect_to_dhpush_title\" })}</h1>\n                    <h3><a href=\"https://dhp.kidozh.com/check-compatibility\">{intl.formatMessage({ id: \"test-my-bbs.redirect_to_dhpush_name\" })}</a></h3>\n                </Grid>\n            </DocLayout>\n        )\n    }\n\n}\n\n\n\nexport default injectIntl(TestPage)"],"names":["TestPage","_React$Component","props","_this","call","state","url","warn","apiResult","apiJSON","response","ok","code","isLoading","handleURLChange","bind","giveURLSuggestion","sendAjaxRequest","setCodeResult","setResponseResult","_inheritsLoose","_proto","prototype","event","this","setState","target","value","checkURL","URL","str","RegExp","test","getFullApiUrl","header","json","clearResult","intl","fetch","method","credentials","then","status","console","log","text","JSON","parse","catch","error","checkBBSResultOk","sitename","setURL","urlString","startsWith","formatMessage","id","componentDidMount","render","React","DocLayout","subject","Grid","sx","textAlign","mt","mb","href","injectIntl"],"sourceRoot":""}